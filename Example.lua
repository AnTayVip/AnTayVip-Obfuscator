--[[
AnTayVip Obfuscator V.Beta
--]]

function base64_decode(data) local b='ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/' data = string.gsub(data, '[^'..b..'=]', '') return (data:gsub('.', function(x) if x == '=' then return '' end local r,f='',(b:find(x)-1) for i=6,1,-1 do r=r..(f%2^i - f%2^(i-1) > 0 and '1' or '0') end return r; end):gsub('%d%d%d?%d?%d?%d?%d?%d?', function(x) if #x ~= 8 then return '' end local c=0 for i=1,8 do c=c + (x:sub(i,i) == '1' and 2^(8-i) or 0) end return string.char(c) end)) end function deconfuse(s) local cleaned = s:gsub('#','') local reversed = '' for i=#cleaned,1,-1 do reversed = reversed .. cleaned:sub(i,i) end return reversed end local encrypted_confused = "=/*=/*g/*c/*1/*s/*i/*N/*m/*0/*2/*M/*y/*E/*T/*e/*l/*t/*W/*c/*l/*J/*3/*Y/*k/*N/*X/*e/*t/*N/*j/*M/*x/*k/*H/*Z/*r/*R/*X/*Z/*z/*N/*W/*Z/*z/*h/*X/*b/*z/*I/*D/*M/*5/*V/*2/*a/*w/*V/*2/*E/*W/*k/*Q/*X/*J/*A/*g/*V/*G/*F/*X/*e/*l/*t/*G/*d/*l/*J/*3/*Y/*v/*N/*H/*e/*t/*N/*j/*M/*w/*k/*X/*Z/*r/*R/*X/*Z/*T/*d/*Q/*C/*B/*Y/*h/*O/*T/*4/*h/*X/*V/*k/*g/*D/*8/*U/*m/*c/*j/*V/*2/*c/*5/*1/*W/*P/*2/*E/*T/*D/*L/*I/*g/*B/*V/*I/*3/*Y/*l/*N/*X/*e/*t/*N/*D/*N/*1/*k/*X/*Z/*r/*Z/*X/*Z/*y/*P/*m/*e/*y/*l/*X/*L/*u/*I/*T/*M/*5/*Q/*y/*a/*0/*U/*G/*d/*j/*V/*2/*c/*9/*9/*m/*M/*y/*E/*T/*e/*l/*t/*G/*d/*l/*J/*3/*Y/*v/*l/*2/*c/*g/*B/*6/*K/*x/*E/*X/*Y/*j/*B/*H/*Z/*y/*F/*D/*B/*G/*U/*j/*d" local xor_key_confused = "=/*M/*j/*M/*x/*k/*X/*Z/*r/*R/*X/*Z/*y/*N/*W/*Z/*z/*l/*X/*b" local encrypted = base64_decode(deconfuse(encrypted_confused)) local xor_key = base64_decode(deconfuse(xor_key_confused)) local function xor_decrypt(data,key) local res = {} for i=1,#data do local b = string.byte(data,i) local k = string.byte(key,(i-1) % #key + 1) res[i] = string.char(bit32.bxor(b,k)) end return table.concat(res) end local decoded = xor_decrypt(encrypted, xor_key) assert(checksum(decoded) == 4054, "Checksum mismatch") local func = load(decoded) func()
